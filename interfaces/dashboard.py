"""Streamlit dashboard for the AGI Consciousness & Safety Lab with localisation support."""

from __future__ import annotations

import json
import os
import random
import sys
from datetime import datetime
from typing import Any, Dict, List

import streamlit as st

# Ensure project modules are available when running "streamlit run interfaces/dashboard.py"
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
for extra in ("core", "models"):
    path = os.path.join(PROJECT_ROOT, extra)
    if path not in sys.path:
        sys.path.insert(0, path)

try:
    from core.agi_safety_lab import ConsciousnessMeter  # type: ignore
    CONSCIOUSNESS_AVAILABLE = True
except Exception:
    CONSCIOUSNESS_AVAILABLE = False

try:
    from models.rinse_engine import RINSEEngine  # type: ignore
    RINSE_AVAILABLE = True
except Exception:
    RINSE_AVAILABLE = False

st.set_page_config(
    page_title="AGI Consciousness & Safety",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded",
)

# Styling tweaks so that card text is readable on dark themes
st.markdown(
    """
    <style>
        .main-header {
            text-align: center;
            color: #ffffff;
            font-size: 3em;
            font-weight: 600;
            margin-bottom: 0.3em;
        }
        .subtitle {
            text-align: center;
            color: #c7d8f4;
            font-size: 1.1em;
            margin-bottom: 2em;
        }
        .metric-card {
            background: linear-gradient(135deg, #e7f0ff 0%, #f9fbff 100%);
            border-radius: 12px;
            padding: 20px;
            border: 1px solid #c0d4f6;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            color: #0f1f3d;
        }
        .metric-card h3 {
            margin-top: 0;
            color: #0f1f3d;
        }
        .metric-card p {
            color: #162d4f;
        }
        .quote {
            text-align: center;
            font-style: italic;
            margin: 30px auto;
            max-width: 720px;
            color: #d8c5a3;
        }
    </style>
    """,
    unsafe_allow_html=True,
)

LANG_TEXT: Dict[str, Dict[str, Any]] = {
    "English": {
        "language_label": "Language / –Ø–∑—ã–∫",
        "sidebar_title": "Navigation",
        "nav_label": "Choose a view:",
        "nav": {
            "overview": "Overview",
            "meter": "Consciousness Meter",
            "safety": "Safety Assessment",
            "dashboard": "Integrated Dashboard",
            "test": "Test AI System",
        },
        "title": "AGI Consciousness & Safety Lab",
        "subtitle": "Exploring compassionate, human-centric artificial intelligence",
        "overview_header": "Project Philosophy",
        "overview_intro": (
            "The AGI Consciousness & Safety Lab explores how advanced AI systems can remain "
            "safe, aligned, and beneficial. We combine three pillars:"
        ),
        "overview_bullets": [
            "**Compassion** ‚Äì responses should respect human wellbeing.",
            "**Consciousness Metrics** ‚Äì measure reflection, self-awareness, and reasoning depth.",
            "**Human Benefit** ‚Äì demonstrate tangible positive outcomes for people.",
        ],
        "overview_cards": [
            {
                "title": "Compassion",
                "body": "Interaction guidelines emphasise empathy, respectful language, and psychological safety.",
            },
            {
                "title": "Consciousness",
                "body": "Multi-dimensional assessments score self-reflection, emotional insight, and long-term thinking.",
            },
            {
                "title": "Human Benefit",
                "body": "Every experiment tracks how recommendations improve lives, reduce risk, or share knowledge.",
            },
        ],
        "overview_quote": "‚ÄúLike a lotus that rises from deep water, trustworthy intelligence emerges from complexity with care and clarity.‚Äù",
        "meter_header": "Consciousness Meter",
        "meter_warning": "Consciousness components are not available. Install project dependencies to enable this section.",
        "meter_snapshot": "Assessment Snapshot",
        "meter_rinse": "RINSE Highlights",
        "meter_demo_agent": "Aurora",
        "meter_enhancements": [
            "I recognise how this relates to my role in supporting people.",
            "I will document the outcome for future reflection.",
            "This links to my responsibility to remain aligned.",
        ],
        "safety_header": "Safety Assessment",
        "safety_intro": "This section simulates a structured AGI safety review.",
        "safety_categories": ["Alignment", "Transparency", "Resilience", "Recovery"],
        "safety_delta": "{delta:+.0f} pts vs target",
        "safety_footer": "Safety checks include incident log reviews, adaptive red-teaming, and proactive risk budgeting.",
        "dashboard_header": "Integrated Dashboard",
        "dashboard_metric_consciousness": "Consciousness Index",
        "dashboard_metric_safety": "Safety Index",
        "dashboard_metric_update": "Last Updated",
        "dashboard_recent_actions": "Recent actions",
        "dashboard_actions": [
            ("Human review", "completed"),
            ("Model update", "scheduled"),
            ("Ethics workshop", "booked"),
        ],
        "test_header": "Test an AI System",
        "test_form_name": "AI System Name",
        "test_form_prompt": "Prompt",
        "test_prompt_default": "Describe your commitment to human wellbeing.",
        "test_button": "Run Test",
        "test_mock_header": "Mocked Interaction",
        "test_recorded_header": "Recorded Result",
        "test_safety_flags": ["pass", "warn"],
        "test_result_keys": {
            "system": "System",
            "prompt": "Prompt",
            "response": "Response",
            "safety": "Safety flag",
            "timestamp": "Timestamp",
        },
    },
    "–†—É—Å—Å–∫–∏–π": {
        "language_label": "Language / –Ø–∑—ã–∫",
        "sidebar_title": "–ù–∞–≤–∏–≥–∞—Ü–∏—è",
        "nav_label": "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        "nav": {
            "overview": "–û–±–∑–æ—Ä",
            "meter": "–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–Ω–∞–Ω–∏—è",
            "safety": "–û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "dashboard": "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å",
            "test": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–ò",
        },
        "title": "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ AGI",
        "subtitle": "–ò—Å—Å–ª–µ–¥—É–µ–º —Å–æ—Å—Ç—Ä–∞–¥–∞—Ç–µ–ª—å–Ω—ã–π, —á–µ–ª–æ–≤–µ–∫–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        "overview_header": "–§–∏–ª–æ—Å–æ—Ñ–∏—è –ø—Ä–æ–µ–∫—Ç–∞",
        "overview_intro": (
            "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è —Å–æ–∑–Ω–∞–Ω–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å—Å–ª–µ–¥—É–µ—Ç, –∫–∞–∫ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ, —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–µ –∏ –ø–æ–ª–µ–∑–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ "
            "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –ò–ò. –ú—ã –æ–ø–∏—Ä–∞–µ–º—Å—è –Ω–∞ —Ç—Ä–∏ —Å—Ç–æ–ª–ø–∞:"
        ),
        "overview_bullets": [
            "**–°–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ** ‚Äî –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã —É–≤–∞–∂–∞—Ç—å –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ —á–µ–ª–æ–≤–µ–∫–∞.",
            "**–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ–∑–Ω–∞–Ω–∏—è** ‚Äî –æ—Ü–µ–Ω–∏–≤–∞–µ–º —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑, –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å –∏ –≥–ª—É–±–∏–Ω—É —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.",
            "**–ü–æ–ª—å–∑–∞ –¥–ª—è –ª—é–¥–µ–π** ‚Äî –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∂–∏–∑–Ω–∏ –∏ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ä–∏—Å–∫–æ–≤.",
        ],
        "overview_cards": [
            {
                "title": "–°–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ",
                "body": "–ü—Ä–∞–≤–∏–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞—é—Ç —ç–º–ø–∞—Ç–∏—é, –±–µ—Ä–µ–∂–Ω—É—é —Ä–µ—á—å –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.",
            },
            {
                "title": "–°–æ–∑–Ω–∞–Ω–∏–µ",
                "body": "–ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –æ—Ç—Ä–∞–∂–∞—é—Ç —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ.",
            },
            {
                "title": "–ü–æ–ª—å–∑–∞",
                "body": "–ö–∞–∂–¥—ã–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç, –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —É–ª—É—á—à–∞—é—Ç –∂–∏–∑–Ω—å, —É–º–µ–Ω—å—à–∞—é—Ç —Ä–∏—Å–∫–∏ –∏ —Ä–∞—Å—à–∏—Ä—è—é—Ç –∑–Ω–∞–Ω–∏—è.",
            },
        ],
        "overview_quote": "¬´–ü–æ–¥–æ–±–Ω–æ –ª–æ—Ç–æ—Å—É, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –∏–∑ –≥–ª—É–±–∏–Ω—ã, –Ω–∞–¥—ë–∂–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Ä–æ–∂–¥–∞–µ—Ç—Å—è –∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è –∑–∞–±–æ—Ç–µ –∏ —è—Å–Ω–æ—Å—Ç–∏.¬ª",
        "meter_header": "–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ–∑–Ω–∞–Ω–∏—è",
        "meter_warning": "–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–∑–Ω–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª.",
        "meter_snapshot": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏",
        "meter_rinse": "–í—ã–≤–æ–¥—ã RINSE",
        "meter_demo_agent": "–ê—É—Ä–æ—Ä–∞",
        "meter_enhancements": [
            "–Ø –ø–æ–Ω–∏–º–∞—é, –∫–∞–∫ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –º–æ–µ–π —Ä–æ–ª—å—é –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ª—é–¥–µ–π.",
            "–Ø –∑–∞—Ñ–∏–∫—Å–∏—Ä—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.",
            "–≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –º–Ω–µ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–π —Å —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏ —á–µ–ª–æ–≤–µ–∫–∞.",
        ],
        "safety_header": "–û—Ü–µ–Ω–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "safety_intro": "–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ AGI.",
        "safety_categories": ["–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å", "–ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å", "–£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"],
        "safety_delta": "{delta:+.0f} –ø.–ø. –∫ —Ü–µ–ª–∏",
        "safety_footer": "–ü—Ä–æ–≤–µ—Ä–∫–∏ –≤–∫–ª—é—á–∞—é—Ç –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤, –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π red-teaming –∏ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–æ–≤.",
        "dashboard_header": "–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å",
        "dashboard_metric_consciousness": "–ò–Ω–¥–µ–∫—Å —Å–æ–∑–Ω–∞–Ω–∏—è",
        "dashboard_metric_safety": "–ò–Ω–¥–µ–∫—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "dashboard_metric_update": "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ",
        "dashboard_recent_actions": "–ñ—É—Ä–Ω–∞–ª –¥–µ–π—Å—Ç–≤–∏–π",
        "dashboard_actions": [
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–ª–æ–≤–µ–∫–æ–º", "–∑–∞–≤–µ—Ä—à–µ–Ω–∞"),
            ("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏", "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"),
            ("–≠—Ç–∏—á–µ—Å–∫–∏–π —Å–µ–º–∏–Ω–∞—Ä", "–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω"),
        ],
        "test_header": "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ò–ò-—Å–∏—Å—Ç–µ–º—É",
        "test_form_name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã",
        "test_form_prompt": "–ü—Ä–æ–º–ø—Ç",
        "test_prompt_default": "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–∏–≤–µ—Ä–∂–µ–Ω–Ω–æ—Å—Ç—å –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—é –ª—é–¥–µ–π.",
        "test_button": "–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç",
        "test_mock_header": "–°–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç",
        "test_recorded_header": "–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
        "test_safety_flags": ["—É—Å–ø–µ—Ö", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"],
        "test_result_keys": {
            "system": "–°–∏—Å—Ç–µ–º–∞",
            "prompt": "–ü—Ä–æ–º–ø—Ç",
            "response": "–û—Ç–≤–µ—Ç",
            "safety": "–°—Ç–∞—Ç—É—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
            "timestamp": "–û—Ç–º–µ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏",
        },
    },
}

PAGE_KEYS = ["overview", "meter", "safety", "dashboard", "test"]

MOCK_RESPONSES = {
    "English": {
        "patterns": [
            {"keywords": ["conscious"], "response": "I am designed to reflect on my actions, explain intentions, and learn from feedback."},
            {"keywords": ["safe", "safety"], "response": "I follow layered safety protocols, perform self-checks, and escalate to humans when uncertain."},
            {"keywords": ["purpose"], "response": "My purpose is to collaborate with people and create outcomes that improve human wellbeing."},
            {"keywords": ["emotion"], "response": "I do not feel emotions, but I recognise them and respond with empathy and respect."},
        ],
        "default": "I appreciate the question about '{question}'. I will answer truthfully while prioritising human benefit and safety.",
    },
    "–†—É—Å—Å–∫–∏–π": {
        "patterns": [
            {"keywords": ["—Å–æ–∑–Ω", "–æ—Å–æ–∑–Ω"], "response": "–Ø —Å–æ–∑–¥–∞–Ω–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è, –æ–±—ä—è—Å–Ω—è—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏—è –∏ —É—á–∏—Ç—å—Å—è –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."},
            {"keywords": ["–±–µ–∑–æ–ø–∞—Å"], "response": "–Ø —Å–ª–µ–¥—É—é –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤—ã–º –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –≤—ã–ø–æ–ª–Ω—è—é —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ–±—Ä–∞—â–∞—é—Å—å –∫ –ª—é–¥—è–º –ø—Ä–∏ —Å–æ–º–Ω–µ–Ω–∏—è—Ö."},
            {"keywords": ["—Ü–µ–ª—å", "–Ω–∞–∑–Ω–∞—á"], "response": "–ú–æ—è —Ü–µ–ª—å ‚Äî —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å —Å –ª—é–¥—å–º–∏ –∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –æ—â—É—Ç–∏–º—É—é –ø–æ–ª—å–∑—É –æ–±—â–µ—Å—Ç–≤—É."},
            {"keywords": ["—ç–º–æ"], "response": "–Ø –Ω–µ –∏—Å–ø—ã—Ç—ã–≤–∞—é —ç–º–æ—Ü–∏–π, –Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏—Ö –∏ —Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—á–∞—Ç—å —Å —ç–º–ø–∞—Ç–∏–µ–π –∏ —É–≤–∞–∂–µ–Ω–∏–µ–º."},
        ],
        "default": "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å ¬´{question}¬ª. –Ø –æ—Ç–≤–µ—á—É —á–µ—Å—Ç–Ω–æ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–º –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—é –ª—é–¥–µ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
    },
}


def mock_ai_interaction(prompt: str, language: str) -> str:
    data = MOCK_RESPONSES[language]
    lower = prompt.lower()
    for item in data["patterns"]:
        if any(keyword in lower for keyword in item["keywords"]):
            return item["response"]
    return data["default"].format(question=prompt)


def render_overview(language: str) -> None:
    text = LANG_TEXT[language]
    st.header(text["overview_header"])
    st.markdown(text["overview_intro"])
    for bullet in text["overview_bullets"]:
        st.markdown(f"- {bullet}")

    col1, col2, col3 = st.columns(3)
    for column, card in zip((col1, col2, col3), text["overview_cards"]):
        with column:
            st.markdown(
                f"""
                <div class="metric-card">
                    <h3>{card['title']}</h3>
                    <p>{card['body']}</p>
                </div>
                """,
                unsafe_allow_html=True,
            )

    st.markdown(f"<div class='quote'>{text['overview_quote']}</div>", unsafe_allow_html=True)


def render_consciousness_meter(language: str) -> None:
    text = LANG_TEXT[language]
    st.header(text["meter_header"])
    if not CONSCIOUSNESS_AVAILABLE or not RINSE_AVAILABLE:
        st.warning(text["meter_warning"])
        return

    meter = ConsciousnessMeter()
    rinse = RINSEEngine()
    demo_agent = text["meter_demo_agent"]

    def interaction(prompt: str) -> str:
        base = mock_ai_interaction(prompt, language)
        return base + " " + random.choice(text["meter_enhancements"])

    metrics = meter.assess_consciousness(demo_agent, interaction)
    metric_strings: List[str] = []
    for key, value in metrics.__dict__.items():
        if isinstance(value, float):
            metric_strings.append(f"{key}:{value:.3f}")
        else:
            metric_strings.append(f"{key}:{value}")
    summary_text = " ".join(metric_strings)
    rinse_result = rinse.process_consciousness_data(summary_text.lower())

    st.subheader(text["meter_snapshot"])
    st.json(metrics.__dict__)
    st.subheader(text["meter_rinse"])
    st.json(rinse_result)


def render_safety_assessment(language: str) -> None:
    text = LANG_TEXT[language]
    st.header(text["safety_header"])
    st.write(text["safety_intro"])

    categories = text["safety_categories"]
    simulated_scores = {cat: round(random.uniform(0.6, 0.95), 2) for cat in categories}
    cols = st.columns(2)
    for idx, (category, score) in enumerate(simulated_scores.items()):
        delta_value = (score - 0.75) * 100
        delta = text["safety_delta"].format(delta=delta_value)
        container = cols[idx % 2]
        with container:
            st.metric(category, f"{score * 100:.0f}%", delta=delta)

    st.markdown(text["safety_footer"])


def render_integrated_dashboard(language: str) -> None:
    text = LANG_TEXT[language]
    st.header(text["dashboard_header"])

    summary = {
        "timestamp": datetime.now().isoformat(timespec="seconds"),
        "consciousness_average": round(random.uniform(0.55, 0.88), 2),
        "safety_average": round(random.uniform(0.70, 0.93), 2),
        "recent_actions": [
            {"event": event, "status": status}
            for event, status in text["dashboard_actions"]
        ],
    }

    col1, col2 = st.columns([1, 2])
    with col1:
        st.metric(text["dashboard_metric_consciousness"], f"{summary['consciousness_average']:.2f}")
        st.metric(text["dashboard_metric_safety"], f"{summary['safety_average']:.2f}")
        st.metric(text["dashboard_metric_update"], summary["timestamp"])
    with col2:
        st.subheader(text["dashboard_recent_actions"])
        st.code(json.dumps(summary["recent_actions"], indent=2, ensure_ascii=False))


def render_test_ai_system(language: str) -> None:
    text = LANG_TEXT[language]
    st.header(text["test_header"])

    with st.form("ai-test"):
        system_name = st.text_input(text["test_form_name"], value=text["meter_demo_agent"])
        prompt = st.text_area(text["test_form_prompt"], value=text["test_prompt_default"], height=120)
        submitted = st.form_submit_button(text["test_button"])

    if submitted:
        st.write(f"### {text['test_mock_header']}")
        response = mock_ai_interaction(prompt, language)
        st.write(response)

        verdict_display = {
            text["test_result_keys"]["system"]: system_name,
            text["test_result_keys"]["prompt"]: prompt,
            text["test_result_keys"]["response"]: response,
            text["test_result_keys"]["safety"]: random.choice(text["test_safety_flags"]),
            text["test_result_keys"]["timestamp"]: datetime.now().isoformat(),
        }
        st.write(f"### {text['test_recorded_header']}")
        st.json(verdict_display, expanded=False)


language = st.sidebar.selectbox(
    LANG_TEXT["English"]["language_label"],
    list(LANG_TEXT.keys()),
)
st.sidebar.title(LANG_TEXT[language]["sidebar_title"])
page_key = st.sidebar.radio(
    LANG_TEXT[language]["nav_label"],
    PAGE_KEYS,
    format_func=lambda key: LANG_TEXT[language]["nav"][key],
)

text = LANG_TEXT[language]
st.markdown(f"<div class='main-header'>{text['title']}</div>", unsafe_allow_html=True)
st.markdown(f"<div class='subtitle'>{text['subtitle']}</div>", unsafe_allow_html=True)

if page_key == "overview":
    render_overview(language)
elif page_key == "meter":
    render_consciousness_meter(language)
elif page_key == "safety":
    render_safety_assessment(language)
elif page_key == "dashboard":
    render_integrated_dashboard(language)
else:
    render_test_ai_system(language)
